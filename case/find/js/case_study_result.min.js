var ntt_ba_casestudy = {};

$(window).load(function()
{
	ntt_ba_casestudy = ntt_ba_casestudy();
	ntt_ba_casestudy.init();
});

var ntt_ba_casestudy = function()
{
	// 
	var that = {};

	/* 
	 * 
	 */
	var init = function()
	{
		$.ajax(
		{
			url      : '/case/find/xml/case_study.xml',
			type     : 'get',
			dataType : 'xml',
			timeout  : 10000,
		}
		).done(function( xml , status, xhr ) 
		{
			if( status != 'success' ) return;

			results( xml );
		}
		).fail(function(xhr, status, error) 
		{
			console.log("xhr.status = " + xhr.status + "<br>");
			console.log("xhr.statusText = " + xhr.statusText + "<br>");
			console.log("status = " + status + "<br>");
			console.log("error = " + error + "<br>");
		});
	};


	/* 
	 * 
	 */
	var results = function( xml )
	{
		var item_length 	= $( xml ).find( 'item' ).length;
		var data 	= get_params();
		var c 		= !is_blank( data[ 'c' ] ) ? decodeURI( data[ 'c' ] ): '' ;
		var s 		= !is_blank( data[ 's' ] ) ? decodeURI( data[ 's' ] ): '' ;
		var e 		= !is_blank( data[ 'e' ] ) ? decodeURI( data[ 'e' ] ): '' ;
		var t 		= !is_blank( data[ 't' ] ) ? decodeURI( data[ 't' ] ): '' ;

		c 		= !is_blank( c ) ? decodeURI( c ): '' ;
		s 		= !is_blank( s ) ? decodeURI( s ): '' ;
		e 		= !is_blank( e ) ? decodeURI( e ): '' ;
		t 		= !is_blank( t ) ? decodeURI( t ): '' ;


		var ts 		= !is_blank( t  ) ? t.split( ',' ) : '';
		var ts_html = '';
		var put_data = {};
		var data_count = 0;

		var max_num = 0;
		var min_num = 0;
		var view_num = '';
		var emp_type = 0; 

		if( e != '' )
		{
			var e_flg = false;
			var pos = e.indexOf( '-' );	

			if( ts == '' ) ts = [];

			if( pos == 0 )
			{
				max_num = e.slice( 1 );
				emp_type = 1; 

				if( isFinite( max_num ) )
				{
					view_num = max_num + '名以下';
					e_flg = true;
				}
			}
			else if( pos == e.length - 1 )
			{
				min_num = e.slice( 0 , -1 );
				emp_type = 2; 

				if( isFinite( min_num ) )
				{
					view_num = min_num + '名以上';
					e_flg = true;
				}
			}
			else if( pos > 0 && pos < e.length -1 )
			{
				var range = e.split( '-' );
				min_num  = range[0];
				max_num  = range[1];
				emp_type = 3; 

				if( isFinite( min_num ) && isFinite( max_num ) )
				{
					min_num = parseInt( min_num , 10 );
					max_num = parseInt( max_num , 10 );

					if( min_num > max_num )
					{
						var temp = max_num;
						max_num = min_num;
						min_num = temp; 
					}

					if( min_num == max_num ) return true;

					view_num = min_num + '～' + max_num + '名';

					e_flg = true;
				}
			}

			if( e_flg )
			{
				ts_html += '<li>' + view_num + '</li>';
			}
			else
			{
				return true;
			} 
		} 


		$( xml ).find( 'item' ).each( function()
		{
			var category 	= $(this).find( 'category' ).text();
			var services 	= $(this).find( 'services' ).text();
			var employees 	= $(this).find( 'employees' ).text();
			var labels 		= $(this).find( 'labels' ).text();
			var aryLabels 	= new Array();
			var num 		= 0;


			if( c != '' && category != c ) return true;
			if( s != '' && services != s ) return true;


			if( e != '' && emp_type != 0 ) 
			{
				employees = parseInt( employees , 10 );

				if( emp_type == 1 )
				{
					if( max_num < employees ) return true;
				}
				else if( emp_type == 2 )
				{
					if( min_num > employees ) return true;
				}
				else if( emp_type == 3 )
				{
					if( min_num > employees ) return true;
					if( max_num < employees ) return true;
				}
			}



			if( ts !='' && labels !='' )
			{
				aryLabels = labels.trim().split( '\n' );

				var flg = false;

				$.each( aryLabels , function( key , value )
				{
					if( in_array( value.trim() , ts ) )
					{
						flg = true;
						return false;
					}
				});

				if( !flg ) return true;
			}

			if( is_blank( put_data[ category ] ) )
			{
				put_data[ category ] = [];
			}

			put_data[ category ].push( this );

			data_count++;
		});



		if( c == '' ) c = 'なし';
		if( s == '' ) s = 'なし';

		if( ts.length > 0  || ts_html !='' )
		{
			$.each( ts , function( key , value )
			{
				ts_html += '<li>' + value + '</li>';
			});
		}
		else
		{
			ts_html = '<li>なし</li>';
		}


		var html = '';

		html += '<section>';
		html += '	<h2>検索結果</h2>';
		html += '	<div class="select-contents">';
		html += '		<p class="head">絞込内容</p>';
		html += '		<div class="inner">';
		html += '			<div class="cate">';
		html += '				<p class="title">カテゴリ：</p>';
		html += '				<ul>';
		html += '					<li>' + c + '</li>';
		html += '				</ul>';
		html += '			</div>';
		html += '			<div class="cate">';
		html += '				<p class="title">サービス：</p>';
		html += '				<ul>';
		html += '					<li>' + s + '</li>';
		html += '				</ul>';
		html += '			</div>';
		html += '			<div class="tag">';
		html += '				<p class="title">タグ：</p>';
		html += '				<ul>'　+ ts_html + '</ul>';
		html += '			</div>';
		html += '		</div>';
		html += '	</div>';


		if( data_count <= 0 )
		{
			html += $( '#zero_msg' ).html();
		}
		else
		{
			var view_count = 0;

			$.each( put_data , function( category_name , items )
			{
				html += '	<div class="search-result-area">';

				if( view_count == 0 )
				{
					html += '	<p class="volume">検索結果：' + data_count + '件</p>';

					view_count++;
				}

				html += '		<h3>' + category_name + '</h3>';
				html += '		<div class="pattern1-1">';

				$.each( items , function()
				{
					var title 		= $(this).find( 'title' ).text();
					var link 		= $(this).find( 'link' ).text();
					var image 		= $(this).find( 'image' ).text();
					var description = $(this).find( 'description' ).text();
					var category 	= $(this).find( 'category' ).text();
					var services 	= $(this).find( 'services' ).text();
					var employees 	= $(this).find( 'employees' ).text();
					var labels 		= $(this).find( 'labels' ).text();
					var ary_labels 	= new Array();


					if( isFinite( employees )) employees = parseInt( employees, 10 ) ;

					var employees_value = '';

					if(  100 >= employees )
					{
 						view_num = '100名以下';		
 						employees_value = '-100';
					}

					if(  101 <= employees && employees <= 500  )
					{
						view_num = '101〜500名';		
						employees_value = '101-500';
					} 	

					if(  501 <= employees && employees <= 1000 )
					{
						view_num = '501〜1000名';	
						employees_value = '501-1000';
					} 	

					if( 1001 <= employees && employees <  5000 )
					{
						view_num = '1001〜5000名';	
						employees_value = '1001-5000';
					} 	

					if( 5000 <= employees )
					{
						view_num = '5000名以上';		
						employees_value = '5000-';
					}
					
					if( 0 ==  employees ) 
					{
						view_num = '';				
						employees_value = '';
					}


					if( labels !='' )
					{
						ary_labels = labels.trim().split( '\n' );
					}

					html += '		<div class="col">';
					html += '			<div class="icon-area">';
					html += '				<figure><img src="' + image + '" alt=""></figure>';
					html += '			</div>';
					html += '			<div class="contents-area">';
					html += '				<p class="result-title"><a href="' + link + '">' + title + '</a></p>';
					html += '				<p>' + description + '</p>';
					html += '				<p class="label cate"><a href="' + get_tag_link( 's' , services ) + '">' + services + '</a></p>';
					html += '				<div class="tag-area">';

					if( ary_labels.length > 0  )
					{
						$.each( ary_labels , function( key , value )
						{
							html += '			<p class="label tag"><a href="' + get_tag_link( 't' , value.trim() ) + '">' + value.trim() + '</a></p>';
						});
					}

					if( view_num != '' )
					{
						html += '			<p class="label tag"><a href="' + get_tag_link( 'e' , employees_value ) + '">' + view_num + '</a></p>';
					}


					html += '				</div>';
					html += '				<p class="to-detail"><a href="' + link + '">詳しく見る</a></p>';
					html += '			</div>';
					html += '		</div>';
				});

				html += '		</div>';
				html += '	</div>';
			});
		}


		html += '</section>';


		$( html ).ready(function()
		{
			$('.search-result-area .col').matchHeight();
			$('.search-result-area .col .result-title').matchHeight();
			$('.search-result-area .col .result-title + p').matchHeight();

			setTimeout( function()
			{
				var c_h = $('#content').height(); 
				var f_h = $('#footer').height(); 
				$('#content').css( 'height' , c_h + f_h + 100 + 'px' );
			} , 150 );
		});

		$('#find-page').html( $( html ) );
	};


	/* 
	 * 
	 */
	var get_params = function()
	{
		var arg = new Object;
		var pair = location.search.substring( 1 ).split( '&' );
		for( var i=0; pair[i]; i++ ) 
		{
		    var kv = pair[ i ].split( '=' );
		    arg[ kv[ 0 ] ] = kv[ 1 ] ;
		}

		return arg;
	};

	/* 
	 * 
	 */
	var is_blank = function( value ) 
	{
		if( value == "" ) return true;
		if( value == null ) return true;
		if( value == false ) return true;
		if( value == undefined ) return true;
		if( value == "undefined" ) return true;
		return false;
	};


	/* 
	 * 
	 */
	var get_tag_link = function( mode , value ) 
	{
		var query = '';
		var vars = [];

		if( mode == 'c' )
		{
			vars.push( 'c=' + value );
		}
		else
		{
			vars.push( 'c=' );
		} 

		if( mode == 's' )
		{
			vars.push( 's=' + value );
		}
		else
		{
			vars.push( 's=' );
		} 

		if( mode == 't' )
		{
			vars.push( 't=' + value );
		}
		else
		{
			vars.push( 't=' );
		} 

		if( mode == 'e' )
		{
			vars.push( 'e=' + value );
		}
		else
		{
			vars.push( 'e=' );
		} 


		/*
		var url = window.location.search;

		hash  = url.slice(1).split('&');    

		for (var i = 0; i < hash.length; i++) 
		{
			array = hash[i].split('=');

			if( array[0] == mode )
			{
				array[1] = value;
			}

			vars.push( array[0] + '=' + array[1] );
		}
		*/

		query = vars.join( '&' );

		return 'result.html?' + query;
	};


	/* 
	 * 
	 */
	var in_array = function( needle, haystack, argStrict )
	{
		var key = '', strict = !! argStrict;

		if ( strict )
		{
			for ( key in haystack )
			{
				if ( haystack[ key ] === needle )  return true;
			}
		}
		else
		{
			for ( key in haystack )
			{
				if ( haystack[ key ] == needle )  return true;
			}
		}
		return false;
	}


	that.init = init;

	return that;
};
